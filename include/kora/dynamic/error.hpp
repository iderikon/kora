/*
    Copyright (c) 2013-2014 Andrey Goryachev <andrey.goryachev@gmail.com>
    Copyright (c) 2011-2014 Other contributors as noted in the AUTHORS file.

    This file is part of Kora.

    Kora is free software; you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    Kora is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef KORA_DYNAMIC_ERROR_HPP
#define KORA_DYNAMIC_ERROR_HPP

#include "kora/utility.hpp"

#include <stdexcept>
#include <string>
#include <typeinfo>

namespace kora {

//! \brief Thrown by the parser when the input stream contains an incorrect JSON.
class KORA_API json_parsing_error_t :
    public std::invalid_argument
{
public:
    /*!
     * \brief Constructor.
     *
     * \param[in] offset Position of the error in the input stream.
     * \param[in] message Message describing the error.
     * \throws std::bad_alloc
     */
    json_parsing_error_t(size_t offset, std::string message);

    ~json_parsing_error_t() KORA_NOEXCEPT;

    //! \returns Position of the error in the input stream.
    size_t
    offset() const KORA_NOEXCEPT;

    //! \returns Message describing the error.
    const char*
    message() const KORA_NOEXCEPT;

private:
    size_t m_offset;
    std::string m_message;
};

//! \brief Base type for all errors generated by dynamic_converter.
class KORA_API bad_cast_t :
    public std::bad_cast
{
public:
    virtual
    ~bad_cast_t() KORA_NOEXCEPT;
};

//! \brief The dynamic object is expected to be null.
class KORA_API expected_null_t :
    public bad_cast_t
{
public:
    ~expected_null_t() KORA_NOEXCEPT;

    virtual
    const char*
    what() const KORA_NOEXCEPT;
};

//! \brief The dynamic object is expected to be of type dynamic_t::bool_t.
class KORA_API expected_bool_t :
    public bad_cast_t
{
public:
    ~expected_bool_t() KORA_NOEXCEPT;

    virtual
    const char*
    what() const KORA_NOEXCEPT;
};

//! \brief The dynamic object is expected to be of type dynamic_t::int_t.
class KORA_API expected_int_t :
    public bad_cast_t
{
public:
    ~expected_int_t() KORA_NOEXCEPT;

    virtual
    const char*
    what() const KORA_NOEXCEPT;
};

//! \brief The dynamic object is expected to be of type dynamic_t::uint_t.
class KORA_API expected_uint_t :
    public bad_cast_t
{
public:
    ~expected_uint_t() KORA_NOEXCEPT;

    virtual
    const char*
    what() const KORA_NOEXCEPT;
};

//! \brief The dynamic object is expected to contain any integer number.
//!
//! The value should be either of type dynamic_t::int_t or dynamic_t::uint_t.
class KORA_API expected_integer_t :
    public bad_cast_t
{
public:
    ~expected_integer_t() KORA_NOEXCEPT;

    virtual
    const char*
    what() const KORA_NOEXCEPT;
};

//! \brief The dynamic object is expected to be of type dynamic_t::double_t.
class KORA_API expected_double_t :
    public bad_cast_t
{
public:
    ~expected_double_t() KORA_NOEXCEPT;

    virtual
    const char*
    what() const KORA_NOEXCEPT;
};

//! \brief The dynamic object is expected to contain any numeric value.
//!
//! The number may be either integer or floating point.
class KORA_API expected_number_t :
    public bad_cast_t
{
public:
    ~expected_number_t() KORA_NOEXCEPT;

    virtual
    const char*
    what() const KORA_NOEXCEPT;
};

//! \brief The dynamic object is expected to be of type dynamic_t::string_t.
class KORA_API expected_string_t :
    public bad_cast_t
{
public:
    ~expected_string_t() KORA_NOEXCEPT;

    virtual
    const char*
    what() const KORA_NOEXCEPT;
};

//! \brief The dynamic object is expected to be of type dynamic_t::array_t.
class KORA_API expected_array_t :
    public bad_cast_t
{
public:
    ~expected_array_t() KORA_NOEXCEPT;

    virtual
    const char*
    what() const KORA_NOEXCEPT;
};

//! \brief The dynamic object is expected to be of type dynamic_t::object_t.
class KORA_API expected_object_t :
    public bad_cast_t
{
public:
    ~expected_object_t() KORA_NOEXCEPT;

    virtual
    const char*
    what() const KORA_NOEXCEPT;
};

//! \brief Indicates that the object should contain an array of some fixed size.
class KORA_API expected_tuple_t :
    public bad_cast_t
{
public:
    //! \brief Constructor.
    //! \param[in] expected_size The size of the tuple.
    explicit
    expected_tuple_t(size_t expected_size) KORA_NOEXCEPT;

    ~expected_tuple_t() KORA_NOEXCEPT;

    //! \returns The size of the tuple.
    size_t
    expected_size() const KORA_NOEXCEPT;

    virtual
    const char*
    what() const KORA_NOEXCEPT;

private:
    size_t m_expected_size;
};

//! \brief Thrown when the converter cannot convert the value to a numeric type without data loss.
class KORA_API bad_numeric_cast_t :
    public bad_cast_t
{
public:
    ~bad_numeric_cast_t() KORA_NOEXCEPT;

    virtual
    const char*
    what() const KORA_NOEXCEPT;
};

/*!
 * \brief The same as bad_numeric_cast_t, but additionally provides information about the target type.
 *
 * There is no much chance you will want to catch this exception rather than bad_numeric_cast_t.
 * Instead it's supposed to be analysed from a user-defined conversion controller,
 * where this analisys may be done in a general way via a template method.
 *
 * \tparam TargetType The type which the dynamic_t object should have been converted to.
 *
 * \sa bad_numeric_cast_t
 */
template<class TargetType>
class KORA_API numeric_overflow_t :
    public bad_numeric_cast_t
{
public:
    ~numeric_overflow_t() KORA_NOEXCEPT { }
};

} // namespace kora

#endif
